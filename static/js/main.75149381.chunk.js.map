{"version":3,"sources":["components/OverallChart.tsx","components/parsedLogBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OverallChart","props","rotated","data","factory","scaleBand","valueField","argumentField","name","text","title","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","ParsedLogBox","classes","Card","variant","CardHeader","avatar","Avatar","className","alt","metadata","fightName","src","fightIcon","subheader","permaLink","tryID","CardContent","filter","item","archetype","sort","a","b","percentrankdps","undefined","isEmpty","LinearProgress","createStyles","previewChip","minWidth","maxWidth","backgroundColor","palette","grey","flexDirection","padding","App","useState","files","setFiles","Map","reports","setReports","progress","setProgress","activeID","setActiveID","API_LINK","getData","file","formData","FormData","append","console","log","get","fetch","method","body","jsonData","ok","json","PARSED","P_REPORT","everything","filtered","encounter","Promise","reject","prevState","set","DR_DATA","error","Container","Box","paddingTop","paddingBottom","marginBottom","color","Typography","align","maxFileSize","acceptedFiles","onChange","fls","listprogress","forEach","has","filesLimit","onDelete","f","splice","findIndex","copy","delete","showPreviews","showPreviewsInDropzone","useChipsForPreview","previewGridProps","container","direction","previewChipProps","previewText","marginTop","Button","size","onClick","window","location","reload","List","dense","map","ListItem","button","divider","ListItemAvatar","CircularProgress","value","style","marginRight","ListItemText","primary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ZAKe,SAASA,EAAaC,GAEnC,OACE,eAAC,IAAD,CACEC,SAAO,EACPC,KAAMF,EAAME,KAFd,UAGE,cAAC,IAAD,CAAeC,QAASC,OACxB,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CACEC,WAAW,iBACXC,cAAc,UACdC,KAAK,mBAEP,cAAC,IAAD,CACEF,WAAW,mBACXC,cAAc,UACdC,KAAK,qBAEP,cAAC,IAAD,CACEF,WAAW,uBACXC,cAAc,UACdC,KAAK,yBAEP,cAAC,IAAD,CACEF,WAAW,sBACXC,cAAc,UACdC,KAAK,wBAEP,cAAC,IAAD,CACEF,WAAW,kBACXC,cAAc,UACdC,KAAK,oBAEP,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAOC,KAAMR,EAAMS,WCrCzB,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACT,QAAS,CACPC,OAAQH,EAAMI,QAAQ,KAG1BC,MAAO,CACLC,MAAON,EAAMI,QAAQ,GACrBG,OAAQP,EAAMI,QAAQ,IAExBI,MAAO,CACLF,MAAON,EAAMI,QAAQ,GACrBG,OAAQP,EAAMI,QAAQ,QAIX,SAASK,EAAarB,GACnC,IAAMsB,EAAUZ,IAEhB,OAAKV,EAAME,KAsBP,eAACqB,EAAA,EAAD,CAAMC,QAAQ,WAAd,UACE,cAACC,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CACEH,QAAQ,SACRI,UAAWN,EAAQF,MACnBS,IAAK7B,EAAME,KAAK4B,SAASC,UACzBC,IAAKhC,EAAME,KAAK4B,SAASG,YAG7BxB,MAAOT,EAAME,KAAK4B,SAASC,UAC3BG,UAAS,UAAKlC,EAAME,KAAK4B,SAASK,UAAzB,8BAAwDnC,EAAME,KAAK4B,SAASM,SAEvF,eAACC,EAAA,EAAD,WACE,cAACtC,EAAD,CAAcG,KAAMF,EAAME,KAAKA,KAAKoC,QAAO,SAACC,GAC1C,MAA0B,QAAnBA,EAAKC,aACXC,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAEE,eAAiBD,EAAEC,kBAC1BnC,MAAO,6BAEX,cAACV,EAAD,CAAcG,KAAMF,EAAME,KAAKA,KAAKoC,QAAO,SAACC,GAC1C,MAA0B,YAAnBA,EAAKC,aACXC,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAEE,eAAiBD,EAAEC,kBAC1BnC,MAAO,iCAEX,cAACV,EAAD,CAAcG,KAAMF,EAAME,KAAKA,KAAKoC,QAAO,SAACC,GAC1C,MAA0B,WAAnBA,EAAKC,aACV/B,MAAO,sCAhDf,eAACc,EAAA,EAAD,CAAMC,QAAQ,WAAd,UACE,cAACC,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CACEH,QAAQ,SACRI,UAAWN,EAAQF,MACnBS,SAAKgB,EACLb,SAAKa,IAGTpC,WAAOoC,EACPX,eAAWW,IAEb,cAACR,EAAA,EAAD,WACIrC,EAAM8C,SAAW,cAACC,EAAA,EAAD,S,aC3BvBrC,EAAYC,aAAW,SAACC,GAAD,OAC3BoC,YAAa,CACXC,YAAa,CACXC,SAAU,IACVC,SAAU,KAEZtC,KAAM,CACJK,MAAO,OACPkC,gBAAiBxC,EAAMyC,QAAQC,KAAK,KACpCxC,QAAS,OACTyC,cAAe,MACfC,QAAS,QAKA,SAASC,IAAO,IAAD,EACFC,mBAAiB,IADf,mBACrBC,EADqB,KACdC,EADc,OAEEF,mBAAmC,IAAIG,KAFzC,mBAErBC,EAFqB,KAEZC,EAFY,OAGIL,mBAA8B,IAAIG,KAHtC,mBAGrBG,EAHqB,KAGXC,EAHW,OAIIP,mBAAiB,IAJrB,mBAIrBQ,EAJqB,KAIXC,EAJW,KAKtBC,EAAW,qCACX9C,EAAUZ,IANY,SAQb2D,EARa,8EAQ5B,WAAuBC,GAAvB,yBAAA5B,EAAA,0DACM4B,EADN,kCAWUC,EAAW,IAAIC,UACVC,OAAO,OAAQH,GACxBI,QAAQC,IAAIJ,EAASK,IAAI,SAb/B,SAe2BC,MAAM,GAAD,OACrBT,EADqB,kCAExB,CACEU,OAAQ,OACRC,KAAMR,IAnBhB,YAeUS,EAfV,QAuBmBC,GAvBnB,kCAyB2CD,EAASE,OAzBpD,eAyBcC,EAzBd,iBA4B+BN,MAAM,GAAD,OAAIT,EAAJ,kCAAsCe,EAAOpD,YA5BjF,aA4BcqD,EA5Bd,QA8BqBH,GA9BrB,kCAgCmCG,EAASF,OAhC5C,eAgCgBG,EAhChB,OAkCcC,EAAWD,EAAW/C,QAAO,SAACiD,GAChC,OAAOA,EAAUnD,QAAU+C,EAAO/C,SAnC9C,kBAqCiB,CAAEN,SAAUqD,EAAQjF,KAAMoF,IArC3C,iCAuCiB,MAvCjB,mFA2CaE,QAAQC,OAAR,OA3Cb,iCA8CS,MA9CT,2DAR4B,kEAyD5B,gCAAA/C,EAAA,oEAGqBiB,GAHrB,aAAAjB,EAAA,oCAAAA,EAAA,yDAGa4B,EAHb,QAIoC,IAA5BN,EAASY,IAAIN,EAAK/D,MAJ1B,4EAQM0D,GAAY,SAACyB,GACX,OAAO,IAAI7B,IAAI6B,GAAWC,IAAIrB,EAAK/D,KAAM,OATjD,SAa4B8D,EAAQC,GAbpC,QAaYsB,EAbZ,UAgBQ3B,GAAY,SAACyB,GACX,OAAO,IAAI7B,IAAI6B,GAAWC,IAAIrB,EAAK/D,KAAM,OAE3C0D,GAAY,SAACyB,GACX,OAAO,IAAI7B,IAAI6B,GAAWC,IAAIrB,EAAK/D,KAAM,QAE3CwD,GAAW,SAAU2B,GACnB,OAAO,IAAI7B,IAAI6B,GAAWC,IAAIrB,EAAK/D,KAAMqF,OAvBnD,kDA2BMlB,QAAQmB,MAAR,MA3BN,6ZAzD4B,sBAyH5B,OACE,eAACC,EAAA,EAAD,CAAW3C,SAAS,KAApB,UACE,cAAC4C,EAAA,EAAD,CACEC,WAAY,EACZC,cAAe,EACfC,aAAc,EACdC,MAAM,eAJR,SAME,cAACC,EAAA,EAAD,CAAY5E,QAAQ,KAAK6E,MAAM,SAA/B,2BAIF,cAAC,IAAD,CACEC,YAAa,IACbC,cAAe,CAAC,QAAS,UACzBC,SA/CN,SAA6BC,GAC3B,IAAIC,EAAoC,IAAI7C,IAAIG,GAChDyC,EAAIE,SAAQ,SAACrC,GACNoC,EAAaE,IAAItC,EAAK/D,OACzBmG,EAAaf,IAAIrB,EAAK/D,KAAM,MAGhCqD,EAAS6C,GACTxC,EAAYyC,IAwCRG,WAAY,GACZC,SAtCN,SAA6BC,GAC3BnD,EACED,EAAMqD,OACJrD,EAAMsD,WAAU,SAAC3C,GAAD,OAAUA,EAAK/D,OAASwG,EAAExG,QAC1C,IAIJ0D,GAAY,WACV,IAAIiD,EAAOlD,EAEX,OADAkD,EAAKC,OAAOJ,EAAExG,MACP2G,MA4BLE,cAAc,EACdC,wBAAwB,EACxBC,oBAAoB,EACpBC,iBAAkB,CAAEC,UAAW,CAAExG,QAAS,EAAGyG,UAAW,QACxDC,iBAAkB,CAAEpG,QAAS,CAAET,KAAMS,EAAQ2B,cAC7C0E,YAAY,mBAGd,eAAC5B,EAAA,EAAD,CAAK6B,UAAW,EAAG1B,aAAc,EAAjC,UACE,cAAC2B,EAAA,EAAD,CACErG,QAAQ,WACRsG,KAAM,QACN3B,MAAM,UACN4B,QAxJoB,2CAoJtB,qBAQA,cAACF,EAAA,EAAD,CACErG,QAAQ,WACRsG,KAAM,QACN3B,MAAM,UACN4B,QAAS,kBAAMC,OAAOC,SAASC,UAJjC,0BAQA,cAACL,EAAA,EAAD,CACErG,QAAQ,WACRsG,KAAM,QACN3B,MAAM,UACN4B,QArDR,WACEnE,EAAS,IACTG,EAAW,IAAIF,KACfI,EAAY,IAAIJ,KAChBM,EAAY,KA6CR,uBASA,cAACgE,EAAA,EAAD,CAAMC,OAAK,EAACxG,UAAWN,EAAQT,KAA/B,SACG8C,EAAM0E,KAAI,SAAC/D,GACV,OACE,eAACgE,EAAA,EAAD,CACEC,QAAM,EAENC,SAAS,EACTT,QAAS,WACP5D,EAAYG,EAAK/D,OALrB,UAQE,cAACkI,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACElH,QAAQ,cACRmH,MAAO3E,EAASY,IAAIN,EAAK/D,MACzBqI,MAAO,CAAEC,YAAa,QAG1B,cAACC,EAAA,EAAD,CAAcC,QAAO,gBAAWzE,EAAK/D,UAbhC+D,EAAK/D,cAoBpB,cAACc,EAAD,CAAcyB,QAA0B,IAAjBgB,EAAQgE,KAAY5H,KAAM4D,EAAQc,IAAIV,QCnOnE,IAYe8E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClG,EAAD,MAEFmG,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75149381.chunk.js","sourcesContent":["import { PercentileReport } from \"../interfaces\";\r\nimport { ArgumentAxis, BarSeries, Chart, ValueAxis, Legend, Title, Tooltip, } from \"@devexpress/dx-react-chart-material-ui\";\r\nimport { ArgumentScale, EventTracker, Stack, } from \"@devexpress/dx-react-chart\";\r\nimport { scaleBand, } from \"@devexpress/dx-chart-core\";\r\n\r\nexport default function OverallChart(props: { data: PercentileReport[], title: string }) {\r\n\r\n  return (\r\n    <Chart \r\n      rotated\r\n      data={props.data}>\r\n      <ArgumentScale factory={scaleBand} />\r\n      <ArgumentAxis />\r\n      <ValueAxis />\r\n      <BarSeries\r\n        valueField=\"percentrankdps\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile DPS\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankmight\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Might\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankquickness\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Quickness\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankalacrity\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Alacrity\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankfury\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Fury\"\r\n      />\r\n      <Stack />\r\n      <Legend />\r\n      <EventTracker />\r\n      <Tooltip />\r\n      <Title text={props.title}/>\r\n    </Chart>\r\n  );\r\n}\r\n","import { Avatar, Card, CardContent, CardHeader, makeStyles,} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport OverallChart from \"./OverallChart\";\r\nimport { FinalReport } from '../interfaces';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nexport default function ParsedLogBox(props: {data: FinalReport | undefined, isEmpty: boolean}) {\r\n  const classes = useStyles();\r\n\r\n  if (!props.data)\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={undefined}\r\n              src={undefined}\r\n            />\r\n          }\r\n          title={undefined}\r\n          subheader={undefined}\r\n        />\r\n        <CardContent>\r\n          {!props.isEmpty && <LinearProgress />}\r\n        </CardContent>\r\n      </Card>\r\n  );\r\n  else {\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={props.data.metadata.fightName}\r\n              src={props.data.metadata.fightIcon}\r\n            />\r\n          }\r\n          title={props.data.metadata.fightName}\r\n          subheader={`${props.data.metadata.permaLink} \\n LogCompare ID: ${props.data.metadata.tryID}`}\r\n        />\r\n        <CardContent>\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"DPS\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"DPS: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"SUPPORT\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"SUPPORT: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"HEALER\"\r\n          })} title={\"HEALER: Compare Percentiles\"}/>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport {\n  Button,\n  Container,\n  Typography,\n  Box,\n  CircularProgress,\n  ListItemAvatar,\n} from \"@material-ui/core\";\nimport { ListItem, ListItemText, List } from \"@material-ui/core\";\nimport { FinalReport, ParsedReport, PercentileReport } from \"./interfaces\";\nimport ParsedLogBox from \"./components/parsedLogBox\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    previewChip: {\n      minWidth: 160,\n      maxWidth: 210,\n    },\n    root: {\n      width: \"100%\",\n      backgroundColor: theme.palette.grey[300],\n      display: \"flex\",\n      flexDirection: \"row\",\n      padding: 0,\n    },\n  })\n);\n\nexport default function App() {\n  const [files, setFiles] = useState<File[]>([]); // Files[]\n  const [reports, setReports] = useState<Map<string, FinalReport>>(new Map()); // Filename: FinalReport\n  const [progress, setProgress] = useState<Map<string, number>>(new Map()); // Filename: progress\n  const [activeID, setActiveID] = useState<string>(\"\");\n  const API_LINK = \"https://mapleia.pythonanywhere.com\";\n  const classes = useStyles();\n\n  async function getData(file: File): Promise<FinalReport | null> {\n    if (file) {\n      try {\n        // send dps.report id\n        // upload_report will\n        //   1. send file to dps.report\n        //   2. get from /getJson?id=dr_id\n        //   3. save to logcompare db\n        //   4. return ParsedReport json\n\n        // Create new form with file.\n        let formData = new FormData();\n        formData.append(\"file\", file);\n        console.log(formData.get(\"file\"));\n        // Post to Log Compare API.\n        var jsonData = await fetch(\n          `${API_LINK}/api/encounters/upload_report/`,\n          {\n            method: \"POST\",\n            body: formData,\n          }\n        );\n\n        if (jsonData.ok) {\n          // Parse report\n          const PARSED: ParsedReport = await jsonData.json();\n\n          // Get all reports from the fight\n          const P_REPORT = await fetch(`${API_LINK}/api/percentiles/?name=${PARSED.fightName}`);\n\n          if (P_REPORT.ok) {\n            // Parse report (which is an array of Encounters)\n            const everything = await P_REPORT.json();\n            // from the list, filter for tryID\n            var filtered = everything.filter((encounter: PercentileReport) => {\n              return encounter.tryID === PARSED.tryID;\n            });\n            return { metadata: PARSED, data: filtered };\n          } else {\n            return null;\n          }\n        }\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    return null;\n  }\n\n  async function handleCompare() {\n    //Send file to dps.report and send id to API\n    // For each parsed json file, upload to log compare database and set progress to 100\n    for (const file of files) {\n      if (progress.get(file.name) !== 0) {\n        continue;\n      }\n      try {\n        setProgress((prevState) => {\n          return new Map(prevState).set(file.name, 10);\n        });\n\n        // fetch percentile report from dps.report id\n        const DR_DATA = await getData(file);\n\n        if (DR_DATA) {\n          setProgress((prevState) => {\n            return new Map(prevState).set(file.name, 70);\n          });\n          setProgress((prevState) => {\n            return new Map(prevState).set(file.name, 100);\n          });\n          setReports(function (prevState) {\n            return new Map(prevState).set(file.name, DR_DATA);\n          });\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  function handleDropBoxChange(fls: File[]) {\n    var listprogress: Map<string, number> = new Map(progress);\n    fls.forEach((file: File) => {\n      if (!listprogress.has(file.name)) {\n        listprogress.set(file.name, 0);\n      }\n    });\n    setFiles(fls);\n    setProgress(listprogress);\n  }\n\n  function handleDropBoxDelete(f: File) {\n    setFiles(\n      files.splice(\n        files.findIndex((file) => file.name === f.name),\n        0\n      )\n    );\n\n    setProgress(() => {\n      var copy = progress;\n      copy.delete(f.name);\n      return copy;\n    });\n  }\n\n  function handleMassDelete() {\n    setFiles([]);\n    setReports(new Map());\n    setProgress(new Map());\n    setActiveID(\"\");\n  }\n  return (\n    <Container maxWidth=\"lg\">\n      <Box\n        paddingTop={2}\n        paddingBottom={2}\n        marginBottom={1}\n        color=\"primary.main\"\n      >\n        <Typography variant=\"h2\" align=\"center\">\n          Log Compare\n        </Typography>\n      </Box>\n      <DropzoneArea\n        maxFileSize={20000000}\n        acceptedFiles={[\".evtc\", \".zevtc\"]}\n        onChange={handleDropBoxChange}\n        filesLimit={10}\n        onDelete={handleDropBoxDelete}\n        showPreviews={true}\n        showPreviewsInDropzone={false}\n        useChipsForPreview={true}\n        previewGridProps={{ container: { spacing: 1, direction: \"row\" } }}\n        previewChipProps={{ classes: { root: classes.previewChip } }}\n        previewText=\"Selected files\"\n      />\n\n      <Box marginTop={2} marginBottom={2}>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={handleCompare}\n        >\n          Compare\n        </Button>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={() => window.location.reload()}\n        >\n          Refresh Page\n        </Button>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={handleMassDelete}\n        >\n          Clear All\n        </Button>\n\n        <List dense className={classes.root}>\n          {files.map((file: File) => {\n            return (\n              <ListItem\n                button\n                key={file.name}\n                divider={true}\n                onClick={() => {\n                  setActiveID(file.name);\n                }}\n              >\n                <ListItemAvatar>\n                  <CircularProgress\n                    variant=\"determinate\"\n                    value={progress.get(file.name)}\n                    style={{ marginRight: 10 }}\n                  />\n                </ListItemAvatar>\n                <ListItemText primary={`File: ${file.name}`} />\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n\n      <ParsedLogBox isEmpty={reports.size === 0} data={reports.get(activeID)} />\n    </Container>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}