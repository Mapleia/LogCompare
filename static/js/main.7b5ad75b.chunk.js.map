{"version":3,"sources":["components/OverallChart.tsx","components/parsedLogBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OverallChart","props","rotated","data","factory","scaleBand","name","modifyDomain","scaleName","valueField","argumentField","text","title","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","ParsedLogBox","classes","Card","variant","CardHeader","avatar","Avatar","className","alt","metadata","src","icon","subheader","Link","href","permaLink","CardContent","filter","item","archetype","sort","a","b","percentrankdps","undefined","isEmpty","LinearProgress","Progress","createStyles","previewChip","minWidth","maxWidth","backgroundColor","palette","grey","flexDirection","padding","marginTop","marginBottom","control","justifyContent","list","flexFlow","listItem","iconButton","divider","App","useState","files","setFiles","links","setLinks","accountTries","setTrys","account","setAccount","link","setLink","Map","reports","setReports","progress","setProgress","React","open","setOpen","error","setError","activeID","setActiveID","API_LINK","getPercentiles","report","fetch","P_REPORT","ok","json","allPercentiles","filtered","encounter","tryID","result","getData","input","method","body","headers","jsonData","PARSED","Promise","reject","statusUpdate","successful","prevState","set","Done","Error","form","e","preventDefault","file","get","Started","formData","FormData","append","DR_DATA","console","log","JSON","stringify","handleAccountSearch","renderProgress","value","CircularProgress","style","marginRight","Running","handleClose","event","reason","Container","Box","paddingTop","paddingBottom","color","Typography","align","Snackbar","autoHideDuration","onClose","Alert","severity","maxFileSize","acceptedFiles","onChange","fls","listprogress","forEach","has","NotStarted","filesLimit","onDelete","f","splice","findIndex","copy","delete","showPreviewsInDropzone","noValidate","autoComplete","TextField","id","label","placeholder","helperText","fullWidth","InputLabelProps","shrink","target","InputProps","startAdornment","InputAdornment","position","IconButton","aria-label","onClick","Divider","orientation","onSubmit","ButtonGroup","size","Button","handleCompare","window","location","reload","List","dense","map","ListItem","button","ListItemAvatar","ListItemText","primary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b5ad75b.chunk.js","sourcesContent":["import { PercentileReport } from \"../interfaces\";\r\nimport { ArgumentAxis, BarSeries, Chart, ValueAxis, Legend, Title, Tooltip, } from \"@devexpress/dx-react-chart-material-ui\";\r\nimport { ArgumentScale, EventTracker, Stack,ValueScale } from \"@devexpress/dx-react-chart\";\r\nimport { scaleBand, } from \"@devexpress/dx-chart-core\";\r\n\r\nexport default function OverallChart(props: { data: PercentileReport[], title: string }) {\r\n  const modifyPercentileDomain = () => [0, 1.0];\r\n\r\n  return (\r\n    <Chart \r\n      rotated\r\n      data={props.data}>\r\n      <ArgumentScale factory={scaleBand} />\r\n      <ArgumentAxis />\r\n      <ValueScale name=\"percentile\" modifyDomain={modifyPercentileDomain} />\r\n      <ValueAxis scaleName=\"percentile\"/>\r\n      <BarSeries\r\n        valueField=\"percentrankdps\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile DPS\"\r\n        scaleName=\"percentile\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankmight\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Might\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankquickness\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Quickness\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankalacrity\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Alacrity\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankfury\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Fury\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <Stack />\r\n      <Legend />\r\n      <EventTracker />\r\n      <Tooltip />\r\n      <Title text={props.title}/>\r\n    </Chart>\r\n  );\r\n}\r\n","import { Avatar, Card, CardContent, CardHeader, makeStyles, Link} from \"@material-ui/core\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport OverallChart from \"./OverallChart\";\r\nimport { FinalReport } from '../interfaces';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nexport default function ParsedLogBox(props: {data: FinalReport | undefined, isEmpty: boolean}) {\r\n  const classes = useStyles();\r\n  \r\n  if (!props.data)\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={undefined}\r\n              src={undefined}\r\n            />\r\n          }\r\n          title={undefined}\r\n          subheader={undefined}\r\n        />\r\n        <CardContent>\r\n          {!props.isEmpty && <LinearProgress />}\r\n        </CardContent>\r\n      </Card>\r\n  );\r\n  else {\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={props.data.metadata.name}\r\n              src={props.data.metadata.icon}\r\n            />\r\n          }\r\n          title={props.data.metadata.name}\r\n          subheader={<Link href={props.data.metadata.permaLink}>{props.data.metadata.permaLink}</Link>}\r\n        />\r\n        <CardContent>\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"DPS\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"DPS: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"SUPPORT\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"SUPPORT: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data.filter((item) => {\r\n            return item.archetype === \"HEALER\"\r\n          })} title={\"HEALER: Compare Percentiles\"}/>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { useState } from \"react\";\nimport { DropzoneArea } from \"material-ui-dropzone\";\nimport {\n  Button,\n  Container,\n  Typography,\n  Box,\n  CircularProgress,\n  ListItemAvatar,\n  Snackbar,\n  TextField,\n  IconButton,\n  InputAdornment,\n  Divider,\n  ButtonGroup,\n} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { ListItem, ListItemText, List } from \"@material-ui/core\";\nimport { FinalReport, ParsedReport, PercentileReport } from \"./interfaces\";\nimport ParsedLogBox from \"./components/parsedLogBox\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    previewChip: {\n      minWidth: 160,\n      maxWidth: 210,\n    },\n    root: {\n      width: \"100%\",\n      backgroundColor: theme.palette.grey[300],\n      display: \"flex\",\n      flexDirection: \"row\",\n      padding: 0,\n      marginTop: 10,\n      marginBottom: 10,\n    },\n    \n    control: {\n      justifyContent: 'center',\n      display: 'flex',\n      marginBottom: 10,\n    },\n    list: {\n      maxWidth: \"100%\",\n      backgroundColor: theme.palette.grey[300],\n      display: \"flex\",\n      flexFlow: \"row wrap\",\n      padding: 0,\n    },\n    listItem: {\n      maxWidth: \"20%\",\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n  })\n);\n\nenum Progress {\n  NotStarted,\n  Started,\n  Running,\n  Done,\n  Error,\n}\n\nexport default function App() {\n  const [files, setFiles] = useState<File[]>([]); // Files[]\n  const [links, setLinks] = useState<string[]>([]); // Links[]\n  const [accountTries, setTrys] = useState<string[]>([]); // accountTries[]\n  const [account, setAccount] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [reports, setReports] = useState<Map<string, FinalReport>>(new Map()); // Name: FinalReport\n  const [progress, setProgress] = useState<Map<string, Progress>>(new Map()); // Name: progress\n\n  const [open, setOpen] = React.useState(false);\n  const [error, setError] = useState(null);\n  const [activeID, setActiveID] = useState<string>(\"\");\n  const DEV_ENV = true;\n  const API_LINK = DEV_ENV? \"http://127.0.0.1:8000\" : \"https://logcompare.herokuapp.com\";\n  const classes = useStyles();\n\n  // returns percentile data, given a report\n  async function getPercentiles(report: ParsedReport): Promise<FinalReport> {\n    // Get all reports from the fight\n    const P_REPORT = await fetch(`${API_LINK}/api/percentiles/?name=${report.name}`);\n\n    let allPercentiles = P_REPORT.ok ? await P_REPORT.json() : [];\n    var filtered = allPercentiles.filter((encounter: PercentileReport) => {\n      return encounter.tryID === report.tryID;\n    });\n    const result: FinalReport = { metadata: report, data: filtered };\n    return result;\n  }\n\n  // returns report, given either a form (with a file) or a link to dps.report\n  async function getData(input: FormData | string): Promise<FinalReport> {\n    // Post to Log Compare API.\n    //   Send file to dps.report, save to logcompare db and return ParsedReport json\n    if (typeof input === 'string') {\n      var jsonData = await fetch(`${API_LINK}/api/fights/upload_report/`, {\n        method: \"POST\",\n        body: input,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n    } else {\n      jsonData = await fetch(`${API_LINK}/api/fights/upload_report/`, {\n        method: \"POST\",\n        body: input,\n      });\n    }\n    const PARSED: ParsedReport = await jsonData.json();\n    if (jsonData.ok) return await getPercentiles(PARSED);\n    return Promise.reject(PARSED);\n  }\n\n  function statusUpdate(name: string, data: any, successful: boolean) {\n    if (successful) {\n      setProgress((prevState) => {\n        return new Map(prevState).set(name, Progress.Done);\n      });\n      setReports(function (prevState) {\n        return new Map(prevState).set(name, data);\n      });\n    } else {\n      setProgress((prevState) => {\n        return new Map(prevState).set(name, Progress.Error);\n      });\n      setError(data);\n    }\n  }\n  // handle compare, sets progresses\n  async function handleCompare(form: boolean, e: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    if (form) {\n      e.preventDefault();\n    }\n    //Send file to dps.report and send id to API\n    // For each parsed json file, upload to log compare database and set progress to 100\n    for (const file of files) {\n      if (progress.get(file.name) === Progress.Done) {\n        continue;\n      }\n      setProgress((prevState) =>\n        new Map(prevState).set(file.name, Progress.Started)\n      );\n      try {\n        let formData = new FormData();\n        formData.append(\"file\", file);\n\n        // fetch percentile report from dps.report id\n        const DR_DATA = await getData(formData);\n        statusUpdate(file.name, DR_DATA, true);\n      } catch (err) {\n        statusUpdate(file.name, err, false);\n      }\n    }\n\n    for (const link of links) {\n      if (progress.get(link) === Progress.Done) {\n        continue;\n      }\n      setProgress((prevState) =>\n        new Map(prevState).set(link, Progress.Started)\n      );\n      try {\n        // fetch percentile report from dps.report id\n        console.log(JSON.stringify({ link: link }))\n        const DR_DATA = await getData(JSON.stringify({ link: link }));\n        statusUpdate(link, DR_DATA, true);\n      } catch (err) {\n        statusUpdate(link, err, false);\n      }\n    }\n  }\n\n  // when new files are added, only add the one's that don't exist and set's a progress setting\n  function handleDropBoxChange(fls: File[]) {\n    var listprogress: Map<string, Progress> = new Map(progress);\n    fls.forEach((file: File) => {\n      if (!listprogress.has(file.name)) {\n        listprogress.set(file.name, Progress.NotStarted);\n      }\n    });\n    setFiles(fls);\n    setProgress(listprogress);\n  }\n\n  // handles file deletion\n  function handleDropBoxDelete(f: File) {\n    setFiles(\n      files.splice(\n        files.findIndex((file) => file.name === f.name),\n        0\n      )\n    );\n\n    setProgress(() => {\n      var copy = progress;\n      copy.delete(f.name);\n      return copy;\n    });\n  }\n\n  // handles clearing all state all\n  function handleMassDelete() {\n    setFiles([]);\n    setLinks([]);\n    setReports(new Map());\n    setProgress(new Map());\n    setError(null);\n    setActiveID(\"\");\n  }\n\n  async function handleAccountSearch(form: boolean, e: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    if (form) {\n      e.preventDefault();\n    }\n    var jsonData = await fetch(`${API_LINK}/api/fights/account_fight/?account=${account}`);\n    if (jsonData.ok) {\n      const PARSED: ParsedReport[] = await jsonData.json();\n      for (const report of PARSED) {\n        setTrys((prevState) => [...prevState, report.tryID])\n        setProgress((prevState) =>\n        new Map(prevState).set(report.tryID, Progress.Started)\n        );\n        try {\n          const P_REPORT = await getPercentiles(report);\n          statusUpdate(report.tryID, P_REPORT, true);\n        } catch(err) {\n          statusUpdate(report.tryID, err, false);\n        }\n      }\n    }\n  }\n\n  // depending on Progress attribute, set appropriate progress circle\n  function renderProgress(value: Progress | undefined) {\n    switch (value) {\n      case Progress.Started:\n        return (\n          <CircularProgress\n            variant=\"determinate\"\n            value={10}\n            style={{ marginRight: 10 }}\n          />\n        );\n      case Progress.Running:\n        return <CircularProgress variant=\"indeterminate\" style={{ marginRight: 10 }} />;\n      case Progress.Done:\n        return (\n          <CircularProgress\n            variant=\"determinate\"\n            value={100}\n            style={{ marginRight: 10 }}\n          />\n        );\n      default:\n        return (\n          <CircularProgress\n            variant=\"determinate\"\n            value={2}\n            style={{ marginRight: 10 }}\n          />\n        );\n    }\n  };\n\n  // handles Error Alert\n  function handleClose(event?: React.SyntheticEvent, reason?: string) {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n  \n  return (\n    <Container maxWidth=\"lg\">\n      <Box\n        paddingTop={2}\n        paddingBottom={2}\n        marginBottom={1}\n        color=\"primary.main\"\n      >\n        <Typography variant=\"h2\" align=\"center\">\n          Log Compare\n        </Typography>\n      </Box>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n      <DropzoneArea\n        maxFileSize={200000000000}\n        acceptedFiles={[\".evtc\", \".zevtc\"]}\n        onChange={handleDropBoxChange}\n        filesLimit={10}\n        onDelete={handleDropBoxDelete}\n        //showPreviews={true}\n        showPreviewsInDropzone={true}\n        //useChipsForPreview={true}\n        //previewGridProps={{ container: { spacing: 1, direction: \"row\" } }}\n        //previewChipProps={{ classes: { root: classes.previewChip } }}\n        //previewText=\"Selected files\"\n\n      />\n      <form noValidate autoComplete=\"off\">\n        <TextField\n          id=\"dpsreport-full-width\"\n          name=\"dpsreport\"\n          label=\"dps.report\"\n          style={{ margin: 8 }}\n          placeholder=\"https://dps.report/...\"\n          helperText=\"Paste a dps.report link here!\"\n          fullWidth\n          margin=\"normal\"\n          variant=\"outlined\"\n          value={link}\n          InputLabelProps={{ shrink: true }}\n          onChange={(e) => setLink(e.target.value)}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <IconButton\n                  className={classes.iconButton}\n                  aria-label=\"search-for-account\"\n                  onClick={(e) => setLinks((prevState) => [...prevState, link])}\n                  //edge=\"false\"\n                >\n                  <AddBoxIcon />\n                </IconButton>\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton \n                  className={classes.iconButton} \n                  aria-label=\"clear-input\"\n                  onClick={(e) => {setLink(\"\")}}\n                  //edge=\"start\"\n                >\n                  <ClearIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </form>\n      <form noValidate autoComplete=\"off\" onSubmit={(e) => handleAccountSearch(true, e)}>\n        <TextField\n            id=\"account-full-width\"\n            label=\"Account\"\n            style={{ margin: 8 }}\n            placeholder=\"Gw2 Account Name\"\n            helperText=\"Search for your account\"\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputLabelProps={{ shrink: true }}\n            onChange={(e) => setAccount(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <IconButton\n                    aria-label=\"search for account\"\n                    onClick={(e) => handleAccountSearch(false, e)}\n                    //edge=\"start\"\n                  >\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </form>\n      <ButtonGroup size=\"large\" color=\"primary\" aria-label=\"control-group\" className={classes.control}>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={(e) => handleCompare(false, e)}\n        >\n          Compare\n        </Button>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={() => window.location.reload()}\n        >\n          Refresh Page\n        </Button>\n        <Button\n          variant=\"outlined\"\n          size={\"large\"}\n          color=\"primary\"\n          onClick={handleMassDelete}\n        >\n          Clear All\n        </Button>\n      </ButtonGroup>\n      <List dense className={classes.list}>\n          {files.map((file: File) => {\n            return (\n              <ListItem\n                className={classes.listItem}\n                button\n                key={file.name}\n                divider={true}\n                onClick={() => {\n                  setActiveID(file.name);\n                }}\n              >\n                <ListItemAvatar>\n                  {renderProgress(progress.get(file.name))}\n                </ListItemAvatar>\n                <ListItemText primary={`File: ${file.name}`} />\n              </ListItem>\n            );\n          })}\n          {links.map((link: string) => {\n            return (\n              <ListItem\n                className={classes.listItem}\n                button\n                key={link}\n                divider={true}\n                onClick={() => {\n                  setActiveID(link);\n                }}\n              >\n                <ListItemAvatar>\n                  {renderProgress(progress.get(link))}\n                </ListItemAvatar>\n                <ListItemText primary={`Link: ${link}`} />\n              </ListItem>\n            );\n          })}\n          {accountTries.map((tryID: string) => {\n            return (\n              <ListItem\n                button\n                className={classes.listItem}\n                key={tryID}\n                divider={true}\n                onClick={() => {\n                  setActiveID(tryID);\n                }}\n              >\n                <ListItemAvatar>\n                  {renderProgress(progress.get(tryID))}\n                </ListItemAvatar>\n                <ListItemText primary={`tryID: ${tryID}`} />\n              </ListItem>\n            );\n          })}\n        </List>\n      <ParsedLogBox isEmpty={reports.size === 0} data={reports.get(activeID)} />\n    </Container>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}