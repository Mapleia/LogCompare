{"version":3,"sources":["components/OverallChart.tsx","components/parsedLogBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OverallChart","props","rotated","data","factory","scaleBand","valueField","argumentField","name","text","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","ParsedLogBox","classes","Card","variant","CardHeader","avatar","Avatar","className","alt","metadata","fightName","src","fightIcon","title","subheader","permaLink","tryID","CardContent","undefined","isEmpty","LinearProgress","createStyles","previewChip","minWidth","maxWidth","backgroundColor","palette","grey","flexDirection","padding","App","useState","files","setFiles","Map","reports","setReports","progress","setProgress","activeID","setActiveID","API_LINK","ORIGIN","getData","pid","a","fetch","method","headers","jsonData","ok","json","PARSED","P_REPORT","everything","filtered","filter","encounter","Promise","reject","get_form","file","formData","FormData","append","get","body","DR_UPLOAD","DR_META","console","log","prevState","set","DR_DATA","permalink","error","Container","Box","paddingTop","paddingBottom","marginBottom","color","Typography","align","maxFileSize","acceptedFiles","onChange","fls","listprogress","forEach","has","filesLimit","onDelete","f","splice","findIndex","copy","delete","showPreviews","showPreviewsInDropzone","useChipsForPreview","previewGridProps","container","direction","previewChipProps","previewText","marginTop","Button","size","onClick","window","location","reload","List","dense","map","ListItem","button","divider","ListItemAvatar","CircularProgress","value","style","marginRight","ListItemText","primary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a79f56e4.chunk.js","sourcesContent":["import { PercentileReport } from \"../interfaces\";\r\nimport { ArgumentAxis, BarSeries, Chart, ValueAxis, Legend, Title, Tooltip } from '@devexpress/dx-react-chart-material-ui';\r\nimport { ArgumentScale, EventTracker, Stack } from \"@devexpress/dx-react-chart\";\r\nimport { scaleBand } from '@devexpress/dx-chart-core';\r\n\r\nexport default function OverallChart(props: {data: PercentileReport[]}) {\r\n    return (\r\n        <Chart\r\n                rotated\r\n                data={props.data}>\r\n                <ArgumentScale factory={scaleBand} />\r\n                <ArgumentAxis/>\r\n                <ValueAxis />\r\n                <BarSeries\r\n                  valueField=\"percentrankdps\"\r\n                  argumentField='account'\r\n                  name=\"Percentile DPS\"\r\n                />\r\n                <BarSeries\r\n                  valueField=\"percentrankmight\"\r\n                  argumentField=\"account\"\r\n                  name=\"Percentile Might\"\r\n                />\r\n                <BarSeries\r\n                  valueField=\"percentrankquickness\"\r\n                  argumentField=\"account\"\r\n                  name=\"Percentile Quickness\"\r\n                />\r\n                <BarSeries\r\n                  valueField=\"percentrankalacrity\"\r\n                  argumentField=\"account\"\r\n                  name=\"Percentile Alacrity\"\r\n                />\r\n                <BarSeries\r\n                  valueField=\"percentrankfury\"\r\n                  argumentField=\"account\"\r\n                  name=\"Percentile Fury\"\r\n                />\r\n                <Stack />\r\n                <Legend/>\r\n                <EventTracker />\r\n                <Tooltip />\r\n                <Title text=\"Compare Percentiles\" />\r\n              </Chart>\r\n    );\r\n}","import { Avatar, Card, CardContent, CardHeader, makeStyles,} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport OverallChart from \"./OverallChart\";\r\nimport { FinalReport } from '../interfaces';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nexport default function ParsedLogBox(props: {data: FinalReport | undefined, isEmpty: boolean}) {\r\n  const classes = useStyles();\r\n\r\n  if (!props.data)\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={undefined}\r\n              src={undefined}\r\n            />\r\n          }\r\n          title={undefined}\r\n          subheader={undefined}\r\n        />\r\n        <CardContent>\r\n          {!props.isEmpty && <LinearProgress />}\r\n        </CardContent>\r\n      </Card>\r\n  );\r\n  else {\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={props.data.metadata.fightName}\r\n              src={props.data.metadata.fightIcon}\r\n            />\r\n          }\r\n          title={props.data.metadata.fightName}\r\n          subheader={`${props.data.metadata.permaLink} \\n LogCompare ID: ${props.data.metadata.tryID}`}\r\n        />\r\n        <CardContent>\r\n          <OverallChart data={props.data.data}/>\r\n          \r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { Button, Container, Typography, Box, CircularProgress, ListItemAvatar } from '@material-ui/core';\nimport { ListItem, ListItemText, List } from '@material-ui/core';\nimport { FinalReport, ParsedReport, PercentileReport } from './interfaces';\nimport ParsedLogBox from './components/parsedLogBox';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    previewChip: {\n      minWidth: 160,\n      maxWidth: 210\n    },\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.grey[300],\n      display: 'flex',\n      flexDirection: 'row',\n      padding: 0,\n    },\n  }));\n\nexport default function App() {\n  const [files, setFiles] = useState<File[]>([]); // Files[]\n  const [reports, setReports] = useState<Map<string, FinalReport>>(new Map()); // Filename: FinalReport\n  const [progress, setProgress] = useState<Map<string, number>>(new Map()); // Filename: progress\n  const [activeID, setActiveID] = useState<string>('');\n  const API_LINK = 'http://127.0.0.1:8000';\n  const ORIGIN = 'http://mapleia.github.io';\n  const classes = useStyles();\n\n  async function getData(pid: string) : Promise<FinalReport | null> {\n    if (pid) {\n      try { \n          // send dps.report id\n          // upload_report will\n          //   1. get from /getJson?id=dr_id \n          //   2. save to logcompare db\n          //   3. return ParsedReport json\n          var jsonData = await fetch(`${API_LINK}/api/encounters/upload_report/?id=${pid}`,\n           {\n              method: 'POST',\n              headers: {\n                'mode': 'cors',\n                'Access-Control-Allow-Origin': ORIGIN,\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS'\n            }});\n\n          if (jsonData.ok) {\n              const PARSED: ParsedReport = await jsonData.json();\n              const P_REPORT = await fetch(`${API_LINK}/api/percentiles/?name=${PARSED.fightName}`);\n              \n              if (P_REPORT.ok) {\n                  const everything = await P_REPORT.json();\n                  var filtered = undefined;\n                  // from the list, filter for tryID\n                  filtered = everything.filter((encounter: PercentileReport) => {\n                      return encounter.tryID === pid;\n                  });\n                  return {metadata: PARSED, data: filtered};\n              } else {\n                return null;\n              }\n          }\n      } catch(err) {\n        return Promise.reject(err);\n      }\n    }\n    return null;\n  }\n\n  async function handleCompare() {\n    //Send file to dps.report and send id to API\n\n    function get_form(file: File) {\n      let formData = new FormData();\n      formData.append('file', file);\n      formData.append('generator', 'ei');\n      formData.append('json', '1');\n      return formData;\n    }\n\n    // For each parsed json file, upload to log compare database and set progress to 100\n    for(const file of files) {\n      if (progress.get(file.name) !== 0) {\n        continue;\n      }\n      try {\n        // Upload to dps.report\n        // get permaLink and ID\n        const DR_UPLOAD = await fetch('https://dps.report/uploadContent', \n        { method: 'POST', body: get_form(file)});\n\n        const DR_META = await DR_UPLOAD.json();\n        console.log(DR_META);\n\n        setProgress((prevState) => {\n          return new Map(prevState).set(file.name, 30);\n        })\n        \n        // fetch percentile report from dps.report id\n        const DR_DATA = await getData(DR_META['id']);\n\n        if (DR_DATA) {\n          setProgress((prevState) => {\n            return new Map(prevState).set(file.name, 70);\n          })\n          DR_DATA.metadata.permaLink = DR_META.permalink;\n  \n          setProgress((prevState) => {\n            return new Map(prevState).set(file.name, 100);\n          })\n          setReports(function(prevState) {\n            return new Map(prevState).set(file.name, DR_DATA);\n          })\n        }\n        \n      } catch(err) {\n        console.error(err);\n      }\n    }\n\n  }\n\n  function handleDropBoxChange(fls: File[]) {\n    var listprogress: Map<string, number> = new Map(progress);\n    fls.forEach((file: File) => {\n      if (!listprogress.has(file.name)) {\n        listprogress.set(file.name, 0);\n      }\n    })\n    setFiles(fls);\n    setProgress(listprogress);\n  }\n\n  function handleDropBoxDelete(f: File) {\n    setFiles(files.splice(files.findIndex(file => file.name === f.name), 0));\n\n    setProgress(() => {\n      var copy = progress;\n      copy.delete(f.name);\n      return copy;\n    });    \n  }\n\n  function handleMassDelete() {\n    setFiles([]);\n    setReports(new Map());\n    setProgress(new Map());\n    setActiveID(\"\");\n  }\n  return (\n    <Container maxWidth=\"lg\">\n      \n      <Box paddingTop={2} paddingBottom={2} marginBottom={1} color=\"primary.main\">\n        <Typography variant=\"h2\" align=\"center\">Log Compare</Typography>\n      </Box>\n      <DropzoneArea\n        maxFileSize={20000000}\n        acceptedFiles={['.evtc', '.zevtc']}\n        onChange={handleDropBoxChange}\n        filesLimit={10}\n        onDelete={handleDropBoxDelete}\n        showPreviews={true}\n        showPreviewsInDropzone={false}\n        useChipsForPreview={true}\n        previewGridProps={{ container: { spacing: 1, direction: 'row' } }}\n        previewChipProps={{ classes: { root: classes.previewChip } }}\n        previewText=\"Selected files\"\n      />\n\n      <Box marginTop={2} marginBottom={2}>\n        <Button variant=\"outlined\"\n          size={'large'}\n          color=\"primary\"\n          onClick={handleCompare}>Compare</Button>\n        <Button variant=\"outlined\"\n          size={'large'}\n          color=\"primary\"\n          onClick={() => window.location.reload()}>Refresh Page</Button>\n        <Button variant=\"outlined\"\n          size={'large'}\n          color=\"primary\"\n          onClick={handleMassDelete}>Clear All</Button>\n\n        <List dense className={classes.root}>\n          {files.map((file: File) => {\n            return (\n              <ListItem button key={file.name} divider={true} onClick={() => { setActiveID(file.name) }}>\n                <ListItemAvatar>\n                  <CircularProgress variant=\"determinate\" value={progress.get(file.name)} style={{marginRight: 10}}/>\n                </ListItemAvatar>\n                <ListItemText primary={`File: ${file.name}`} />\n              </ListItem>\n              )\n          })}\n        </List>\n      </Box>\n      \n      <ParsedLogBox isEmpty={(reports.size === 0)} data={reports.get(activeID)} />\n    \n    </Container>)\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}