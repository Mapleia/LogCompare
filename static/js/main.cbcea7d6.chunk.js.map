{"version":3,"sources":["interfaces.ts","components/OverallChart.tsx","components/parsedLogBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Progress","OverallChart","props","rotated","data","factory","scaleBand","name","modifyDomain","scaleName","valueField","argumentField","text","title","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","ParsedLogBox","classes","Card","variant","CardHeader","avatar","Avatar","className","alt","metadata","src","icon","subheader","Link","href","permaLink","CardContent","filter","item","archetype","sort","a","b","percentrankdps","undefined","isEmpty","LinearProgress","createStyles","previewChip","minWidth","maxWidth","iconButton","padding","divider","control","justifyContent","marginBottom","App","useState","metas","setMeta","reports","setReports","error","setError","open","setOpen","link","setLink","account","setAccount","active","setActive","Map","progress","setProgress","files","setFiles","API_LINK","handleClose","event","reason","getPercentiles","meta","fetch","percentiles","json","P_REPORT","filtered","encounter","tryID","newFiles","prevState","file","input","FormData","append","method","body","upload_report","finalArr","i","get","Done","push","set","Started","final","length","handleAddLink","e","preventDefault","arr","replace","split","map","trim","arrLink","indexOf","console","log","JSON","stringify","headers","handleAccountSearch","account_fight","renderProgress","index","CircularProgress","style","marginRight","value","Container","Box","paddingTop","paddingBottom","color","Typography","align","Snackbar","autoHideDuration","onClose","Alert","severity","fileObjects","maxFileSize","acceptedFiles","onAdd","filesLimit","onDelete","deletedFileObject","splice","findIndex","showPreviews","showPreviewsInDropzone","useChipsForPreview","previewGridProps","container","direction","previewChipProps","previewText","noValidate","autoComplete","onSubmit","TextField","id","label","placeholder","helperText","fullWidth","multiline","rows","InputLabelProps","shrink","onChange","target","InputProps","startAdornment","InputAdornment","position","IconButton","aria-label","onClick","Divider","orientation","ButtonGroup","size","Button","window","location","reload","Tabs","indicatorColor","textColor","scrollButtons","Tab","a11yProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbcea7d6.chunk.js","sourcesContent":["export interface ParsedReport {\r\n    tryID: string;\r\n    name: string;\r\n    icon: string;\r\n    permaLink: string;\r\n    cm: boolean;\r\n}\r\n\r\nexport interface PercentileReport {\r\n    tryID: string;\r\n    account: string;\r\n    archetype: string;\r\n    percentrankdps: number;\r\n    percentrankmight: number;\r\n    percentrankquickness: number;\r\n    percentrankalacrity: number;\r\n    percentrankfury: number;\r\n\r\n}\r\n\r\nexport interface FinalReport {\r\n    data?: PercentileReport[];\r\n    metadata?: ParsedReport;\r\n}\r\n\r\nexport enum Progress {\r\n    Started,\r\n    Done,\r\n}\r\n// # 725 Fury, 740 Might, 1187 Quickness, 30328 Alacrity\r\n\r\nexport const BOONS = [725, 740, 1187, 30328];\r\nexport const BOON_NAMES = [\"fury\", \"might\", \"quickness\", \"alacrity\"];\r\n\r\nexport const API_LINK = 'https://mapleia.pythonanywhere.com'\r\n//         'https://mapleia.pythonanywhere.com/' \r\n","import { PercentileReport } from \"../interfaces\";\r\nimport { ArgumentAxis, BarSeries, Chart, ValueAxis, Legend, Title, Tooltip, } from \"@devexpress/dx-react-chart-material-ui\";\r\nimport { ArgumentScale, EventTracker, Stack,ValueScale } from \"@devexpress/dx-react-chart\";\r\nimport { scaleBand, } from \"@devexpress/dx-chart-core\";\r\n\r\nexport default function OverallChart(props: { data: PercentileReport[] | undefined, title: string }) {\r\n  const modifyPercentileDomain = () => [0, 1.0];\r\n\r\n  return (\r\n    <Chart \r\n      rotated\r\n      data={props.data? props.data : []}>\r\n      <ArgumentScale factory={scaleBand} />\r\n      <ArgumentAxis />\r\n      <ValueScale name=\"percentile\" modifyDomain={modifyPercentileDomain} />\r\n      <ValueAxis scaleName=\"percentile\"/>\r\n      <BarSeries\r\n        valueField=\"percentrankdps\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile DPS\"\r\n        scaleName=\"percentile\"\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankmight\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Might\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankquickness\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Quickness\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankalacrity\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Alacrity\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <BarSeries\r\n        valueField=\"percentrankfury\"\r\n        argumentField=\"account\"\r\n        name=\"Percentile Fury\"\r\n        scaleName=\"percentile\"\r\n\r\n      />\r\n      <Stack />\r\n      <Legend />\r\n      <EventTracker />\r\n      <Tooltip />\r\n      <Title text={props.title}/>\r\n    </Chart>\r\n  );\r\n}\r\n","import { Avatar, Card, CardContent, CardHeader, makeStyles, Link} from \"@material-ui/core\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport OverallChart from \"./OverallChart\";\r\nimport { FinalReport } from '../interfaces';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\n\r\nexport default function ParsedLogBox(props: {data: FinalReport | undefined, isEmpty: boolean}) {\r\n  const classes = useStyles();\r\n  \r\n  if (!props.data)\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={undefined}\r\n              src={undefined}\r\n            />\r\n          }\r\n          title={undefined}\r\n          subheader={undefined}\r\n        />\r\n        <CardContent>\r\n          {!props.isEmpty && <LinearProgress />}\r\n        </CardContent>\r\n      </Card>\r\n  );\r\n  else {\r\n    return (\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar\r\n              variant=\"square\"\r\n              className={classes.large}\r\n              alt={props.data.metadata?.name}\r\n              src={props.data.metadata?.icon}\r\n            />\r\n          }\r\n          title={props.data.metadata?.name}\r\n          subheader={<Link href={props.data.metadata?.permaLink}>{props.data.metadata?.permaLink}</Link>}\r\n        />\r\n        <CardContent>\r\n          <OverallChart data={props.data.data?.filter((item) => {\r\n            return item.archetype === \"DPS\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"DPS: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data?.filter((item) => {\r\n            return item.archetype === \"SUPPORT\"\r\n          }).sort((a, b) => {\r\n            return a.percentrankdps - b.percentrankdps\r\n          })} title={\"SUPPORT: Compare Percentiles\"}/>\r\n\r\n          <OverallChart data={props.data.data?.filter((item) => {\r\n            return item.archetype === \"HEALER\"\r\n          })} title={\"HEALER: Compare Percentiles\"}/>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n","import Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\n\r\n\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport { DropzoneAreaBase, FileObject } from \"material-ui-dropzone\";\r\nimport { useState } from \"react\";\r\n\r\nimport { FinalReport, ParsedReport, PercentileReport, Progress } from \"./interfaces\";\r\nimport ParsedLogBox from \"./components/parsedLogBox\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    previewChip: {\r\n      minWidth: 160,\r\n      maxWidth: 210,\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n    },\r\n    control: {\r\n        justifyContent: 'center',\r\n        display: 'flex',\r\n        marginBottom: 10,\r\n      },\r\n  })\r\n);\r\n\r\nexport default function App() {\r\n    const [metas, setMeta] = useState<ParsedReport[]>([]);\r\n    const [reports, setReports] = useState<FinalReport[]>([]); // Name: FinalReport\r\n    const [error, setError] = useState<string>(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const [link, setLink] = useState(\"\");\r\n    const [account, setAccount] = useState(\"\");\r\n    const [active, setActive] = useState<number>(0);\r\n    const [progress, setProgress] = useState<Map<number, Progress>>(new Map());\r\n    const [files, setFiles] = useState<FileObject[]>([]);\r\n    const classes = useStyles();\r\n\r\n    const DEV_ENV = false;\r\n    const API_LINK = DEV_ENV? \"http://127.0.0.1:8000\" : \"https://logcompare.herokuapp.com\";\r\n\r\n    // Handle closing Alert\r\n    function handleClose(event?: React.SyntheticEvent, reason?: string) {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    // Based on given metadata and map key, get the percentiles data.\r\n    async function getPercentiles(meta: ParsedReport) {\r\n        try {\r\n            var percentiles = await fetch(`${API_LINK}/api/percentiles/?name=${meta.name}`);\r\n            const P_REPORT = await percentiles.json();\r\n            var filtered = P_REPORT.filter((encounter: PercentileReport) => {\r\n                return encounter.tryID === meta.tryID;\r\n            });\r\n            return filtered;\r\n        } catch(err) {\r\n            setError(err);\r\n            return [];\r\n        }\r\n    }\r\n    \r\n    // Handle uploading new files\r\n    async function handleAddFiles(newFiles: FileObject[]) {\r\n        setFiles((prevState) => [...prevState, ...newFiles]);\r\n        for (const file of newFiles) {\r\n            try {\r\n                var input = new FormData();\r\n                input.append(\"file\", file.file);\r\n                var upload_report = await fetch(`${API_LINK}/api/fights/upload_report/`, { method: \"POST\", body: input });\r\n                let meta = await upload_report.json();\r\n                setMeta((prevState) => [...prevState, meta]);\r\n            } catch (err) {\r\n                setError(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function compareItems() {\r\n        var finalArr: FinalReport[] = [];\r\n\r\n        for (let i = 0; i < metas.length; i++) {\r\n            if (progress.get(i) === Progress.Done) {\r\n                finalArr.push(reports[i])\r\n            }\r\n            setProgress((prevState) => new Map(prevState).set(i, Progress.Started));\r\n            var data :PercentileReport[] = await getPercentiles(metas[i]);\r\n            let final: FinalReport = {\r\n                metadata: metas[i],\r\n                data: data\r\n            }\r\n            finalArr.push(final);\r\n            setProgress((prevState) => new Map(prevState).set(i, Progress.Done));\r\n        }\r\n\r\n        setReports(finalArr);\r\n    }\r\n\r\n    async function handleAddLink(e?: React.FormEvent<HTMLFormElement>) {\r\n        if (e) e.preventDefault();\r\n        var arr = link.replace(/\\n/g, \",\").split(\",\").map((link) => link.trim());\r\n        var arrLink: string[] = metas.map((meta) => meta.permaLink);\r\n        var filtered = arr.filter((e) => arrLink.indexOf(e) < 0, arrLink);\r\n        console.log(`Links list size: ${arr.length}`);\r\n        console.log(`filtered list size: ${filtered.length}`)\r\n        if ( arr.length > filtered.length) {\r\n            setError(\"Link already added.\");\r\n            setOpen(true);\r\n            return;\r\n        }\r\n        for (const link of filtered) {\r\n            try {\r\n                // fetch percentile report from dps.report id\r\n                var upload_report = await fetch(`${API_LINK}/api/fights/upload_report/`, {\r\n                    method: \"POST\",\r\n                    body: JSON.stringify({ link: link}),\r\n                    headers: {\r\n                      'Accept': 'application/json',\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                let meta: ParsedReport = await upload_report.json();\r\n                setMeta((prevState) => [...prevState, meta]);\r\n            } catch (err) {\r\n                setError(err);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    async function handleAccountSearch(e? : React.FormEvent<HTMLFormElement>) {\r\n        if (e) e.preventDefault();\r\n        try {\r\n            var account_fight = await fetch(`${API_LINK}/api/fights/account_fight/?account=${account}`);\r\n            let metas: ParsedReport[] = await account_fight.json();\r\n            setMeta((prevState) => [...prevState, ...metas]);\r\n        }\r\n        catch (err) {\r\n            setError(err);\r\n        }\r\n    }\r\n\r\n    function a11yProps(index: any) {\r\n        return {\r\n          id: `scrollable-auto-tab-${index}`,\r\n          'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    // depending on Progress attribute, set appropriate progress circle\r\n    function renderProgress(index: number) {\r\n        switch (progress.get(index)) {\r\n        case Progress.Started:\r\n            return (\r\n            <CircularProgress variant=\"indeterminate\" style={{ marginRight: 10 }}/>\r\n            );\r\n        case Progress.Done:\r\n            return (\r\n            <CircularProgress\r\n                variant=\"determinate\"\r\n                value={100}\r\n                style={{ marginRight: 10 }}\r\n            />\r\n            );\r\n        default:\r\n            return (\r\n            <CircularProgress\r\n                variant=\"indeterminate\"\r\n                value={2}\r\n                style={{ marginRight: 10 }}\r\n            />\r\n            );\r\n        }\r\n    };\r\n\r\n    function handleDropBoxDelete(deletedFileObject: FileObject) {\r\n        setFiles(files.splice(files.findIndex((file) => file.file.name === deletedFileObject.file.name), 0));\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Box paddingTop={2} paddingBottom={2} marginBottom={1} color=\"primary.main\">\r\n                <Typography variant=\"h2\" align=\"center\">Log Compare</Typography>\r\n            </Box>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">{error}</Alert>\r\n            </Snackbar>\r\n            <DropzoneAreaBase\r\n                fileObjects={files}\r\n                maxFileSize={200000000000}\r\n                acceptedFiles={[\".evtc\", \".zevtc\"]}\r\n                onAdd={handleAddFiles}\r\n                filesLimit={10}\r\n                onDelete={handleDropBoxDelete}\r\n                showPreviews={true}\r\n                showPreviewsInDropzone={true}\r\n                useChipsForPreview={true}\r\n                previewGridProps={{ container: { spacing: 1, direction: \"row\" } }}\r\n                previewChipProps={{ classes: { root: classes.previewChip } }}\r\n                previewText=\"Selected files\"\r\n            />\r\n            <form noValidate autoComplete=\"off\" onSubmit={(e) => handleAddLink(e)}>\r\n                <TextField\r\n                id=\"dpsreport-full-width\"\r\n                name=\"dpsreport\"\r\n                label=\"dps.report\"\r\n                style={{ margin: 8 }}\r\n                placeholder=\"https://dps.report/...\"\r\n                helperText=\"Paste dps.report links here! Separate by newline or commas.\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n                value={link}\r\n                InputLabelProps={{ shrink: true }}\r\n                onChange={(e) => setLink(e.target.value)}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                        <IconButton className={classes.iconButton} aria-label=\"search-account\" onClick={(e) => handleAddLink()}>\r\n                            <AddBoxIcon />\r\n                        </IconButton>\r\n                        <Divider className={classes.divider} orientation=\"vertical\" />\r\n                        <IconButton className={classes.iconButton} aria-label=\"clear-input\" onClick={(e) => {setLink(\"\")}}>\r\n                            <ClearIcon />\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                    ),\r\n                }}\r\n                />\r\n            </form>\r\n            <form noValidate autoComplete=\"off\" onSubmit={(e) => handleAccountSearch(e)}>\r\n                <TextField\r\n                    id=\"account-full-width\"\r\n                    label=\"Account\"\r\n                    style={{ margin: 8 }}\r\n                    placeholder=\"Gw2 Account Name\"\r\n                    helperText=\"Search for your account\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    onChange={(e) => setAccount(e.target.value)}\r\n                    InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <IconButton aria-label=\"search-account\" onClick={(e) => handleAccountSearch()}>\r\n                                <SearchIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                    }}\r\n                />\r\n                </form>\r\n            <ButtonGroup size=\"large\" color=\"primary\" aria-label=\"control-group\" className={classes.control}>\r\n                <Button variant=\"outlined\" size={\"large\"} color=\"primary\" onClick={compareItems}>\r\n                    Compare\r\n                </Button>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    size={\"large\"}\r\n                    color=\"primary\"\r\n                    onClick={() => window.location.reload()}\r\n                    >\r\n                    Refresh Page\r\n                    </Button>\r\n            </ButtonGroup>\r\n            <Tabs\r\n                value={active}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                onChange={(e, value) => setActive(value)}\r\n                aria-label=\"report-tabs\"\r\n                scrollButtons=\"auto\"\r\n                variant=\"scrollable\">{metas.map((value, index) => {\r\n                    return(<Tab label={value.tryID} key={index} value={index} icon={renderProgress(index)} {...a11yProps(index)} />)\r\n                })}</Tabs>\r\n            <ParsedLogBox isEmpty={reports.length === 0} data={reports[active]} />\r\n        </Container>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}